using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

using AngouriMath;

namespace BisectionMethod
{
    public partial class Form1 : Form
    {
        Entity expr;
        static int errno = 0;

        public Form1()
        {
            InitializeComponent();
        }

        private double f(double x)
        {
            double res = 0.0;

            try
            {
                var subs = expr.Substitute("x", x);
                res = (double)subs.EvalNumerical();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Information);
                errno = -1;
            }

            return res;
        }

        private void расчитатьToolStripMenuItem_Click(object sender, EventArgs e)
        {
            double a   = (double)numericUpDown_a.Value;
            double b   = (double)numericUpDown_b.Value;
            double eps = (double)numericUpDown_e.Value;
            double c;

            if (eps == 0)
            {
                MessageBox.Show("значение точности(e) не задано!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            if (textBox_fx.Text == "")
            {
                MessageBox.Show("Поле формулы не заполнено!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            expr = textBox_fx.Text;

            if (a  == b)
            {
                MessageBox.Show("Значение интервалов не может быть одинаковым!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }

            c = (a + b) / 2;
            int sign_fc = Math.Sign(f(c));
            int is_sign_change = 0;

            while (Math.Abs(b - a) > eps)
            {
                if (errno != 0)
                {
                    errno = 0;
                    return;
                }

                c = (a + b) / 2;
                Console.WriteLine("f(c) = {0}", f(c));
                if (sign_fc != Math.Sign(f(c)))
                    is_sign_change++;

                if (f(b) * f(c) < 0)
                    a = c;
                else
                    b = c;
            }

            //Для графика
            int N          = 202;
            double[] xs    = new double[N];
            double[] ys    = new double[N];
            double x_start = -2;
            double x_end   = 2;
            double x_step  = (x_end - x_start) / (N - 1);
            double x_val   = x_start;

            for (int i = 0; i < N; ++i)
            {
                xs[i] = x_val;
                ys[i] = f(xs[i]);
                x_val += x_step;
            }

            formsPlot1.Plot.Clear();
            formsPlot1.Plot.AddScatter(xs, ys, Color.LightGreen, 1, 3);
            formsPlot1.Refresh();

            if (is_sign_change == 0)
            {
                MessageBox.Show("На данном интервале, решений уравнения нет!", "Внимание", MessageBoxButtons.OK, MessageBoxIcon.Information);
                return;
            }
            double res = c;
            Console.WriteLine("res = {0}", res);

            formsPlot1.Plot.Clear();
            formsPlot1.Plot.AddScatter(xs, ys, Color.LightGreen, 1, 3);
            formsPlot1.Plot.AddPoint(res, f(res), Color.Red, 8, ScottPlot.MarkerShape.filledCircle);
            formsPlot1.Refresh();

        }

        private void показатьГрафикToolStripMenuItem_Click(object sender, EventArgs e)
        {
            numericUpDown_a.Value = 0;
            numericUpDown_b.Value = 0;
            numericUpDown_e.Value = 0;
            textBox_fx.Text       = "";

        }

        private void выходToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.Close();
        }
    }
}
